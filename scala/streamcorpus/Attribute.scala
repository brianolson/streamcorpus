/**
 * generated by Scrooge ${project.version}
 */
package streamcorpus

import com.twitter.scrooge.{
  ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import scala.collection.mutable
import scala.collection.{Map, Set}

/**
 * Description of an attribute of an entity discovered by a tagger in
 * the text.
 */
object Attribute extends ThriftStructCodec3[Attribute] {
  val Struct = new TStruct("Attribute")
  val AttributeTypeField = new TField("attribute_type", TType.ENUM, 1)
  val EvidenceField = new TField("evidence", TType.STRING, 2)
  val ValueField = new TField("value", TType.STRING, 3)
  val SentenceIdField = new TField("sentence_id", TType.I32, 4)
  val MentionIdField = new TField("mention_id", TType.I32, 5)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Attribute) {
  }

  override def encode(_item: Attribute, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol): Attribute = Immutable.decode(_iprot)

  def apply(
    attributeType: Option[AttributeType] = None,
    evidence: Option[String] = None,
    value: Option[String] = None,
    sentenceId: Option[Int] = None,
    mentionId: Option[Int] = None
  ): Attribute = new Immutable(
    attributeType,
    evidence,
    value,
    sentenceId,
    mentionId
  )

  def unapply(_item: Attribute): Option[Product5[Option[AttributeType], Option[String], Option[String], Option[Int], Option[Int]]] = Some(_item)

  object Immutable extends ThriftStructCodec3[Attribute] {
    override def encode(_item: Attribute, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Attribute = {
      var attributeType: AttributeType = null
      var _got_attributeType = false
      var evidence: String = null
      var _got_evidence = false
      var value: String = null
      var _got_value = false
      var sentenceId: Int = 0
      var _got_sentenceId = false
      var mentionId: Int = 0
      var _got_mentionId = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* attributeType */
              _field.`type` match {
                case TType.I32 | TType.ENUM => {
                  attributeType = {
                    streamcorpus.AttributeType(_iprot.readI32())
                  }
                  _got_attributeType = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* evidence */
              _field.`type` match {
                case TType.STRING => {
                  evidence = {
                    _iprot.readString()
                  }
                  _got_evidence = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* value */
              _field.`type` match {
                case TType.STRING => {
                  value = {
                    _iprot.readString()
                  }
                  _got_value = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 4 => { /* sentenceId */
              _field.`type` match {
                case TType.I32 => {
                  sentenceId = {
                    _iprot.readI32()
                  }
                  _got_sentenceId = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 5 => { /* mentionId */
              _field.`type` match {
                case TType.I32 => {
                  mentionId = {
                    _iprot.readI32()
                  }
                  _got_mentionId = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ =>
              TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        if (_got_attributeType) Some(attributeType) else None,
        if (_got_evidence) Some(evidence) else None,
        if (_got_value) Some(value) else None,
        if (_got_sentenceId) Some(sentenceId) else None,
        if (_got_mentionId) Some(mentionId) else None
      )
    }
  }

  /**
   * The default read-only implementation of Attribute.  You typically should not need to
   * directly reference this class; instead, use the Attribute.apply method to construct
   * new instances.
   */
  class Immutable(
    val attributeType: Option[AttributeType] = None,
    val evidence: Option[String] = None,
    val value: Option[String] = None,
    val sentenceId: Option[Int] = None,
    val mentionId: Option[Int] = None
  ) extends Attribute

  /**
   * This Proxy trait allows you to extend the Attribute trait with additional state or
   * behavior and implement the read-only methods from Attribute using an underlying
   * instance.
   */
  trait Proxy extends Attribute {
    protected def _underlying_Attribute: Attribute
    def attributeType: Option[AttributeType] = _underlying_Attribute.attributeType
    def evidence: Option[String] = _underlying_Attribute.evidence
    def value: Option[String] = _underlying_Attribute.value
    def sentenceId: Option[Int] = _underlying_Attribute.sentenceId
    def mentionId: Option[Int] = _underlying_Attribute.mentionId
  }
}

trait Attribute extends ThriftStruct
  with Product5[Option[AttributeType], Option[String], Option[String], Option[Int], Option[Int]]
  with java.io.Serializable
{
  import Attribute._

  private[this] val AttributeTypeFieldI32 = new TField("attribute_type", TType.I32, 1)
  def withoutPassthroughs(f: TField => Boolean) = this
  def withPassthroughs(pts: TraversableOnce[(TField, TTransport)]) = this

  def attributeType: Option[AttributeType]
  def evidence: Option[String]
  def value: Option[String]
  def sentenceId: Option[Int]
  def mentionId: Option[Int]

  def _1 = attributeType
  def _2 = evidence
  def _3 = value
  def _4 = sentenceId
  def _5 = mentionId

  override def write(_oprot: TProtocol) {
    Attribute.validate(this)
    _oprot.writeStructBegin(Struct)
    if (attributeType.isDefined) {
      val attributeType_item = attributeType.get
      _oprot.writeFieldBegin(AttributeTypeFieldI32)
      _oprot.writeI32(attributeType_item.value)
      _oprot.writeFieldEnd()
    }
    if (evidence.isDefined) {
      val evidence_item = evidence.get
      _oprot.writeFieldBegin(EvidenceField)
      _oprot.writeString(evidence_item)
      _oprot.writeFieldEnd()
    }
    if (value.isDefined) {
      val value_item = value.get
      _oprot.writeFieldBegin(ValueField)
      _oprot.writeString(value_item)
      _oprot.writeFieldEnd()
    }
    if (sentenceId.isDefined) {
      val sentenceId_item = sentenceId.get
      _oprot.writeFieldBegin(SentenceIdField)
      _oprot.writeI32(sentenceId_item)
      _oprot.writeFieldEnd()
    }
    if (mentionId.isDefined) {
      val mentionId_item = mentionId.get
      _oprot.writeFieldBegin(MentionIdField)
      _oprot.writeI32(mentionId_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    attributeType: Option[AttributeType] = this.attributeType, 
    evidence: Option[String] = this.evidence, 
    value: Option[String] = this.value, 
    sentenceId: Option[Int] = this.sentenceId, 
    mentionId: Option[Int] = this.mentionId
  ): Attribute =
    new Immutable(
      attributeType, 
      evidence, 
      value, 
      sentenceId, 
      mentionId
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Attribute]

  override def equals(other: Any): Boolean = _root_.scala.runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => attributeType
    case 1 => evidence
    case 2 => value
    case 3 => sentenceId
    case 4 => mentionId
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Attribute"
}