/**
 * generated by Scrooge ${project.version}
 */
package streamcorpus

import com.twitter.scrooge.ThriftEnum


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"), date = "2013-08-10T15:41:41.385-0400")
case object AttributeType {
  
  case object PerAge extends AttributeType {
    val value = 0
    val name = "PerAge"
  }
  
  case object PerGender extends AttributeType {
    val value = 1
    val name = "PerGender"
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): AttributeType = {
    value match {
      case 0 => PerAge
      case 1 => PerGender
      case _ => throw new NoSuchElementException(value.toString)
    }
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): Option[AttributeType] = {
    value match {
      case 0 => scala.Some(PerAge)
      case 1 => scala.Some(PerGender)
      case _ => scala.None
    }
  }

  def valueOf(name: String): Option[AttributeType] = {
    name.toLowerCase match {
      case "perage" => scala.Some(AttributeType.PerAge)
      case "pergender" => scala.Some(AttributeType.PerGender)
      case _ => scala.None
    }
  }

  lazy val list: List[AttributeType] = scala.List[AttributeType](
    PerAge,
    PerGender
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"), date = "2013-08-10T15:41:41.385-0400")
sealed trait AttributeType extends ThriftEnum with Serializable