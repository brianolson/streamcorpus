/**
 * generated by Scrooge ${project.version}
 */
package streamcorpus

import com.twitter.scrooge.{
  ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import scala.collection.mutable
import scala.collection.{Map, Set}

/**
 * Description of a relation between two entities that a tagger
 * discovered in the text.
 */
object Relation extends ThriftStructCodec3[Relation] {
  val Struct = new TStruct("Relation")
  val RelationTypeField = new TField("relation_type", TType.ENUM, 1)
  val SentenceId1Field = new TField("sentence_id_1", TType.I32, 2)
  val MentionId1Field = new TField("mention_id_1", TType.I32, 3)
  val SentenceId2Field = new TField("sentence_id_2", TType.I32, 4)
  val MentionId2Field = new TField("mention_id_2", TType.I32, 5)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Relation) {
  }

  override def encode(_item: Relation, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol): Relation = Immutable.decode(_iprot)

  def apply(
    relationType: Option[RelationType] = None,
    sentenceId1: Option[Int] = None,
    mentionId1: Option[Int] = None,
    sentenceId2: Option[Int] = None,
    mentionId2: Option[Int] = None
  ): Relation = new Immutable(
    relationType,
    sentenceId1,
    mentionId1,
    sentenceId2,
    mentionId2
  )

  def unapply(_item: Relation): Option[Product5[Option[RelationType], Option[Int], Option[Int], Option[Int], Option[Int]]] = Some(_item)

  object Immutable extends ThriftStructCodec3[Relation] {
    override def encode(_item: Relation, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Relation = {
      var relationType: RelationType = null
      var _got_relationType = false
      var sentenceId1: Int = 0
      var _got_sentenceId1 = false
      var mentionId1: Int = 0
      var _got_mentionId1 = false
      var sentenceId2: Int = 0
      var _got_sentenceId2 = false
      var mentionId2: Int = 0
      var _got_mentionId2 = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* relationType */
              _field.`type` match {
                case TType.I32 | TType.ENUM => {
                  relationType = {
                    streamcorpus.RelationType(_iprot.readI32())
                  }
                  _got_relationType = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* sentenceId1 */
              _field.`type` match {
                case TType.I32 => {
                  sentenceId1 = {
                    _iprot.readI32()
                  }
                  _got_sentenceId1 = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* mentionId1 */
              _field.`type` match {
                case TType.I32 => {
                  mentionId1 = {
                    _iprot.readI32()
                  }
                  _got_mentionId1 = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 4 => { /* sentenceId2 */
              _field.`type` match {
                case TType.I32 => {
                  sentenceId2 = {
                    _iprot.readI32()
                  }
                  _got_sentenceId2 = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 5 => { /* mentionId2 */
              _field.`type` match {
                case TType.I32 => {
                  mentionId2 = {
                    _iprot.readI32()
                  }
                  _got_mentionId2 = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ =>
              TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        if (_got_relationType) Some(relationType) else None,
        if (_got_sentenceId1) Some(sentenceId1) else None,
        if (_got_mentionId1) Some(mentionId1) else None,
        if (_got_sentenceId2) Some(sentenceId2) else None,
        if (_got_mentionId2) Some(mentionId2) else None
      )
    }
  }

  /**
   * The default read-only implementation of Relation.  You typically should not need to
   * directly reference this class; instead, use the Relation.apply method to construct
   * new instances.
   */
  class Immutable(
    val relationType: Option[RelationType] = None,
    val sentenceId1: Option[Int] = None,
    val mentionId1: Option[Int] = None,
    val sentenceId2: Option[Int] = None,
    val mentionId2: Option[Int] = None
  ) extends Relation

  /**
   * This Proxy trait allows you to extend the Relation trait with additional state or
   * behavior and implement the read-only methods from Relation using an underlying
   * instance.
   */
  trait Proxy extends Relation {
    protected def _underlying_Relation: Relation
    def relationType: Option[RelationType] = _underlying_Relation.relationType
    def sentenceId1: Option[Int] = _underlying_Relation.sentenceId1
    def mentionId1: Option[Int] = _underlying_Relation.mentionId1
    def sentenceId2: Option[Int] = _underlying_Relation.sentenceId2
    def mentionId2: Option[Int] = _underlying_Relation.mentionId2
  }
}

trait Relation extends ThriftStruct
  with Product5[Option[RelationType], Option[Int], Option[Int], Option[Int], Option[Int]]
  with java.io.Serializable
{
  import Relation._

  private[this] val RelationTypeFieldI32 = new TField("relation_type", TType.I32, 1)
  def withoutPassthroughs(f: TField => Boolean) = this
  def withPassthroughs(pts: TraversableOnce[(TField, TTransport)]) = this

  def relationType: Option[RelationType]
  def sentenceId1: Option[Int]
  def mentionId1: Option[Int]
  def sentenceId2: Option[Int]
  def mentionId2: Option[Int]

  def _1 = relationType
  def _2 = sentenceId1
  def _3 = mentionId1
  def _4 = sentenceId2
  def _5 = mentionId2

  override def write(_oprot: TProtocol) {
    Relation.validate(this)
    _oprot.writeStructBegin(Struct)
    if (relationType.isDefined) {
      val relationType_item = relationType.get
      _oprot.writeFieldBegin(RelationTypeFieldI32)
      _oprot.writeI32(relationType_item.value)
      _oprot.writeFieldEnd()
    }
    if (sentenceId1.isDefined) {
      val sentenceId1_item = sentenceId1.get
      _oprot.writeFieldBegin(SentenceId1Field)
      _oprot.writeI32(sentenceId1_item)
      _oprot.writeFieldEnd()
    }
    if (mentionId1.isDefined) {
      val mentionId1_item = mentionId1.get
      _oprot.writeFieldBegin(MentionId1Field)
      _oprot.writeI32(mentionId1_item)
      _oprot.writeFieldEnd()
    }
    if (sentenceId2.isDefined) {
      val sentenceId2_item = sentenceId2.get
      _oprot.writeFieldBegin(SentenceId2Field)
      _oprot.writeI32(sentenceId2_item)
      _oprot.writeFieldEnd()
    }
    if (mentionId2.isDefined) {
      val mentionId2_item = mentionId2.get
      _oprot.writeFieldBegin(MentionId2Field)
      _oprot.writeI32(mentionId2_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    relationType: Option[RelationType] = this.relationType, 
    sentenceId1: Option[Int] = this.sentenceId1, 
    mentionId1: Option[Int] = this.mentionId1, 
    sentenceId2: Option[Int] = this.sentenceId2, 
    mentionId2: Option[Int] = this.mentionId2
  ): Relation =
    new Immutable(
      relationType, 
      sentenceId1, 
      mentionId1, 
      sentenceId2, 
      mentionId2
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Relation]

  override def equals(other: Any): Boolean = _root_.scala.runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => relationType
    case 1 => sentenceId1
    case 2 => mentionId1
    case 3 => sentenceId2
    case 4 => mentionId2
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Relation"
}